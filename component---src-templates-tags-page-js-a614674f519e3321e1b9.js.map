{"version":3,"sources":["webpack:///./node_modules/reactstrap/es/Badge.js","webpack:///./src/util/utilityfunctions.js","webpack:///./node_modules/reactstrap/es/ListGroup.js","webpack:///./node_modules/reactstrap/es/ListGroupItem.js","webpack:///./src/templates/tags-page.js"],"names":["Badge","props","className","cssModule","color","innerRef","pill","Tag","tag","attributes","classes","href","createElement","ref","defaultProps","module","exports","slugify","text","toString","toLowerCase","replace","flush","horizontal","getHorizontalClass","handleDisabledOnClick","e","preventDefault","active","disabled","action","onClick","tagsPage","pageContext","tags","tagPostCounts","pageTitle","title","keywords","map","id","key"],"mappings":"6FAAA,kFAWIA,EAAQ,SAAeC,GACzB,IAAIC,EAAYD,EAAMC,UAClBC,EAAYF,EAAME,UAClBC,EAAQH,EAAMG,MACdC,EAAWJ,EAAMI,SACjBC,EAAOL,EAAMK,KACbC,EAAMN,EAAMO,IACZC,EAAa,YAA8BR,EAAO,CAAC,YAAa,YAAa,QAAS,WAAY,OAAQ,QAE1GS,EAAU,YAAgB,IAAWR,EAAW,QAAS,SAAWE,IAAOE,GAAO,cAAuBH,GAM7G,OAJIM,EAAWE,MAAgB,SAARJ,IACrBA,EAAM,KAGD,IAAMK,cAAcL,EAAK,YAAS,GAAIE,EAAY,CACvDP,UAAWQ,EACXG,IAAKR,MAITL,EAAMc,aA3Ba,CACjBV,MAAO,YACPE,MAAM,EACNE,IAAK,QAyBQ,O,mDCtBfO,EAAOC,QAAU,CAAEC,QAXH,SAASC,GACrB,OAAOA,EACNC,WACAC,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,O,mJCYhB,EAAY,SAAmBpB,GACjC,IAAIC,EAAYD,EAAMC,UAClBC,EAAYF,EAAME,UAClBI,EAAMN,EAAMO,IACZc,EAAQrB,EAAMqB,MACdC,EAAatB,EAAMsB,WACnBd,EAAa,YAA8BR,EAAO,CAAC,YAAa,YAAa,MAAO,QAAS,eAE7FS,EAAU,YAAgB,IAAWR,EAAW,aAEpDoB,EAAQ,mBApBe,SAA4BC,GACnD,OAAmB,IAAfA,KAEsB,IAAfA,GAAsC,OAAfA,EACzB,wBAGF,yBAA2BA,GAaLC,CAAmBD,IAAcpB,GAC9D,OAAO,IAAMS,cAAcL,EAAK,YAAS,GAAIE,EAAY,CACvDP,UAAWQ,MAIf,EAAUI,aA/BS,CACjBN,IAAK,KACLe,YAAY,GA8BC,QC5BXE,EAAwB,SAA+BC,GACzDA,EAAEC,kBAGA,EAAgB,SAAuB1B,GACzC,IAAIC,EAAYD,EAAMC,UAClBC,EAAYF,EAAME,UAClBI,EAAMN,EAAMO,IACZoB,EAAS3B,EAAM2B,OACfC,EAAW5B,EAAM4B,SACjBC,EAAS7B,EAAM6B,OACf1B,EAAQH,EAAMG,MACdK,EAAa,YAA8BR,EAAO,CAAC,YAAa,YAAa,MAAO,SAAU,WAAY,SAAU,UAEpHS,EAAU,YAAgB,IAAWR,IAAW0B,GAAS,WAAkBC,GAAW,aAAoBC,GAAS,2BAAkC1B,GAAQ,mBAAqBA,EAAe,mBAAoBD,GAMzN,OAJI0B,IACFpB,EAAWsB,QAAUN,GAGhB,IAAMb,cAAcL,EAAK,YAAS,GAAIE,EAAY,CACvDP,UAAWQ,MAIf,EAAcI,aA7BK,CACjBN,IAAK,MA6BQ,Q,wBCbAwB,UAhBG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACTC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,cACd,OACI,kBAAC,IAAD,CAAQC,UAAU,eAClB,kBAAC,IAAD,CAAKC,MAAM,cAAcC,SAAU,CAAC,kBACpC,kBAAC,EAAD,KACCJ,EAAKK,KAAI,SAAA/B,GAAG,OACT,kBAAC,EAAD,CAAegC,GAAG,QAAQC,IAAKjC,GAAM,uBAAGN,UAAU,YAAYS,KAAI,QAAUM,kBAAQT,IAASA,GAC5F,kBAACR,EAAA,EAAD,CAAOI,MAAM,OAAOF,UAAU,cAAcI,MAAI,GAAE6B,EAAc3B","file":"component---src-templates-tags-page-js-a614674f519e3321e1b9.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.defaultProps = defaultProps;\nexport default Badge;","const slugify = function(text) {\r\n    return text\r\n    .toString()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, '-')    //replace spaces with -\r\n    .replace(/[^\\w-]+/g, '') //remove all non-word chars \r\n    .replace(/--+/g, '-')    //replace multiple -- with single -\r\n    .replace(/^-+/, '')      //trim - from start of text\r\n    .replace(/-+$/, '')      // trim - from end of text\r\n}\r\n\r\nmodule.exports = { slugify }","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  tag: 'ul',\n  horizontal: false\n};\n\nvar getHorizontalClass = function getHorizontalClass(horizontal) {\n  if (horizontal === false) {\n    return false;\n  } else if (horizontal === true || horizontal === \"xs\") {\n    return \"list-group-horizontal\";\n  }\n\n  return \"list-group-horizontal-\" + horizontal;\n};\n\nvar ListGroup = function ListGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      flush = props.flush,\n      horizontal = props.horizontal,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"flush\", \"horizontal\"]);\n\n  var classes = mapToCssModules(classNames(className, 'list-group', // list-group-horizontal cannot currently be mixed with list-group-flush\n  // we only try to apply horizontal classes if flush is false\n  flush ? 'list-group-flush' : getHorizontalClass(horizontal)), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroup.defaultProps = defaultProps;\nexport default ListGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar handleDisabledOnClick = function handleDisabledOnClick(e) {\n  e.preventDefault();\n};\n\nvar ListGroupItem = function ListGroupItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      active = props.active,\n      disabled = props.disabled,\n      action = props.action,\n      color = props.color,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"active\", \"disabled\", \"action\", \"color\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, disabled ? 'disabled' : false, action ? 'list-group-item-action' : false, color ? \"list-group-item-\" + color : false, 'list-group-item'), cssModule); // Prevent click event when disabled.\n\n  if (disabled) {\n    attributes.onClick = handleDisabledOnClick;\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroupItem.defaultProps = defaultProps;\nexport default ListGroupItem;","import React from \"react\"\r\nimport Layout from '../components/layout'\r\nimport SEO from '../components/seo'\r\nimport {Badge, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport { slugify} from '../util/utilityfunctions'\r\n\r\nconst tagsPage =  ({ pageContext }) => {\r\n    const { tags, tagPostCounts } = pageContext;\r\n    return (\r\n        <Layout pageTitle=\"Kategoriler\">\r\n        <SEO title=\"Kategoriler\" keywords={['tags, topics']}/>\r\n        <ListGroup>\r\n        {tags.map(tag => (\r\n            <ListGroupItem id=\"liste\" key={tag} ><a className=\"tagsColor\" href={`/tag/${slugify(tag)}`}>{tag}</a> \r\n             <Badge color=\"dark\" className=\"float-right\" pill>{tagPostCounts[tag]}</Badge>\r\n             </ListGroupItem>\r\n            ))}\r\n        </ListGroup>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default tagsPage\r\n\r\n"],"sourceRoot":""}